// Century Old Tunes - JavaScript Application

class CenturyOldTunesApp {
    constructor() {
        this.recordings = [];
        this.filteredRecordings = [];
        this.currentYear = new Date().getFullYear();
        this.targetYear = this.currentYear - 100;
        
        this.init();
    }
    
    init() {
        this.updateYearDisplay();
        this.loadStats();
        this.setupEventListeners();
        this.loadRecordings();
    }
    
    updateYearDisplay() {
        document.getElementById('current-year').textContent = this.currentYear;
        document.getElementById('target-year').textContent = this.targetYear;
    }
    
    setupEventListeners() {
        // Search button
        document.getElementById('search-btn').addEventListener('click', () => {
            this.loadRecordings();
        });
        
        // Enter key in filters
        document.querySelectorAll('select').forEach(select => {
            select.addEventListener('change', () => {
                this.loadRecordings();
            });
        });
    }
    
    async loadRecordings() {
        const loadingEl = document.getElementById('loading');
        const gridEl = document.getElementById('recordings-grid');
        const noResultsEl = document.getElementById('no-results');
        const countEl = document.getElementById('results-count');
        
        // Show loading state
        loadingEl.style.display = 'block';
        gridEl.innerHTML = '';
        noResultsEl.style.display = 'none';
        countEl.textContent = '';
        
        try {
            // Load real data from JSON files generated by R export script
            await this.loadDataFromAPI();
            
            // Apply filters
            this.applyFilters();
            
            // Render results
            this.renderRecordings();
            
        } catch (error) {
            console.error('Error loading recordings:', error);
            this.showError('Failed to load recordings. Please try again.');
        } finally {
            loadingEl.style.display = 'none';
        }
    }
    
    async loadDataFromAPI() {
        try {
            // Load actual data from JSON files generated by R script
            const response = await fetch('data/recordings.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            this.recordings = await response.json();
            
            // Clean and standardize the data
            this.recordings = this.recordings.map(record => ({
                ...record,
                // Normalize genre names for filtering
                genre: this.normalizeGenre(record.genre),
                // Ensure popularity_score is a number
                popularity_score: parseFloat(record.popularity_score) || 0
            }));
            
            console.log('Loaded', this.recordings.length, 'recordings from database');
            
        } catch (error) {
            console.error('Error loading data:', error);
            
            // Fallback to sample data if JSON loading fails
            console.log('Falling back to sample data');
            this.recordings = [
                {
                    title: "Data Loading Error - Using Sample Data",
                    artist: "System Message",
                    year: 1925,
                    country: "US",
                    genre: "jazz",
                    label: "Sample Records",
                    popularity_score: 0.5
                }
            ];
        }
    }
    
    normalizeGenre(genre) {
        if (!genre || genre === 'Unknown') return '';
        
        // Map complex genre strings to simpler categories for filtering
        const genreMap = {
            'Folk, World, & Country': 'folk',
            'Pop, Folk, World, & Country': 'folk',
            'Jazz, Pop': 'jazz',
            'Jazz, Blues': 'jazz',
            'Jazz, Pop, Stage & Screen': 'jazz'
        };
        
        // Check if exact match in map
        if (genreMap[genre]) {
            return genreMap[genre];
        }
        
        // Check if contains key genre terms
        const lowerGenre = genre.toLowerCase();
        if (lowerGenre.includes('folk')) return 'folk';
        if (lowerGenre.includes('jazz')) return 'jazz';
        if (lowerGenre.includes('pop')) return 'popular';
        if (lowerGenre.includes('blues')) return 'blues';
        if (lowerGenre.includes('classical')) return 'classical';
        if (lowerGenre.includes('ragtime')) return 'ragtime';
        if (lowerGenre.includes('dance')) return 'dance';
        
        return lowerGenre;
    }
    
    applyFilters() {
        const countryFilter = document.getElementById('country-filter').value;
        const genreFilter = document.getElementById('genre-filter').value;
        const sortFilter = document.getElementById('sort-filter').value;
        
        // Filter recordings
        this.filteredRecordings = this.recordings.filter(recording => {
            const matchesCountry = !countryFilter || recording.country === countryFilter;
            const matchesGenre = !genreFilter || recording.genre === genreFilter;
            
            return matchesCountry && matchesGenre;
        });
        
        // Sort recordings
        this.filteredRecordings.sort((a, b) => {
            switch (sortFilter) {
                case 'title':
                    return a.title.localeCompare(b.title);
                case 'artist':
                    return a.artist.localeCompare(b.artist);
                case 'popularity':
                    return b.popularity_score - a.popularity_score;
                case 'country':
                    return a.country.localeCompare(b.country);
                default:
                    return 0;
            }
        });
    }
    
    renderRecordings() {
        const gridEl = document.getElementById('recordings-grid');
        const noResultsEl = document.getElementById('no-results');
        const countEl = document.getElementById('results-count');
        
        if (this.filteredRecordings.length === 0) {
            noResultsEl.style.display = 'block';
            countEl.textContent = '';
            return;
        }
        
        countEl.textContent = `Found ${this.filteredRecordings.length} recording${this.filteredRecordings.length !== 1 ? 's' : ''}`;
        
        gridEl.innerHTML = this.filteredRecordings.map(recording => `
            <div class="recording-card">
                <h3>${this.escapeHtml(recording.title)}</h3>
                <div class="artist">${this.escapeHtml(recording.artist)}</div>
                <div class="metadata">
                    <span>üìÖ ${recording.year}</span>
                    <span>üåç ${recording.country}</span>
                    <span>üéµ ${recording.genre}</span>
                    <span>üè∑Ô∏è ${this.escapeHtml(recording.label)}</span>
                    <span>‚≠ê ${(recording.popularity_score * 100).toFixed(0)}%</span>
                </div>
            </div>
        `).join('');
    }
    
    async loadStats() {
        try {
            // Load real stats from JSON file generated by R export script
            const response = await fetch('data/stats.json');
            if (response.ok) {
                const stats = await response.json();
                
                document.getElementById('total-recordings').textContent = stats.totalRecordings.toLocaleString();
                document.getElementById('total-artists').textContent = stats.totalArtists.toLocaleString();
                document.getElementById('total-countries').textContent = stats.totalCountries;
                document.getElementById('total-genres').textContent = stats.totalGenres;
                
                console.log('Loaded real statistics:', stats);
            } else {
                throw new Error('Stats file not found');
            }
            
        } catch (error) {
            console.error('Error loading stats:', error);
            
            // Fallback stats
            document.getElementById('total-recordings').textContent = '---';
            document.getElementById('total-artists').textContent = '---';
            document.getElementById('total-countries').textContent = '---';
            document.getElementById('total-genres').textContent = '---';
        }
    }
    
    showError(message) {
        const gridEl = document.getElementById('recordings-grid');
        gridEl.innerHTML = `<div class="error-message" style="grid-column: 1 / -1; text-align: center; color: #d32f2f; padding: 2rem;">${message}</div>`;
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new CenturyOldTunesApp();
});

// Export data to CSV function (for future use)
function exportToCSV() {
    // This would export the current filtered results to CSV
    console.log('Export functionality would be implemented here');
}

// Function to integrate with R backend (for future implementation)
async function fetchFromRAPI(endpoint, params = {}) {
    // This would make requests to R Plumber API or similar
    // For now, return sample data
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve({ data: [], message: 'R API integration coming soon' });
        }, 500);
    });
}