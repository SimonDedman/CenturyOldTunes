// Century Old Tunes - JavaScript Application

class CenturyOldTunesApp {
    constructor() {
        this.recordings = [];
        this.filteredRecordings = [];
        this.currentYear = new Date().getFullYear();
        this.targetYear = this.currentYear - 100;
        
        this.init();
    }
    
    init() {
        this.updateYearDisplay();
        this.loadStats();
        this.setupEventListeners();
        this.loadRecordings();
    }
    
    populateFilters() {
        // Get unique countries and genres from actual data
        const countries = [...new Set(this.recordings.map(r => r.country).filter(c => c && c !== 'Unknown' && c !== ''))]
            .sort();
        const genres = [...new Set(this.recordings.map(r => this.normalizeGenre(r.genre)).filter(g => g && g !== ''))]
            .sort();
        
        // Populate country dropdown
        const countrySelect = document.getElementById('country-filter');
        countrySelect.innerHTML = '<option value="">All Countries</option>';
        countries.forEach(country => {
            const option = document.createElement('option');
            option.value = country;
            option.textContent = country === 'US' ? 'United States' : country;
            countrySelect.appendChild(option);
        });
        
        // Populate genre dropdown  
        const genreSelect = document.getElementById('genre-filter');
        genreSelect.innerHTML = '<option value="">All Genres</option>';
        genres.forEach(genre => {
            const option = document.createElement('option');
            option.value = genre;
            option.textContent = genre.charAt(0).toUpperCase() + genre.slice(1);
            genreSelect.appendChild(option);
        });
        
        console.log('Populated filters - Countries:', countries.length, 'Genres:', genres.length);
    }
    
    updateYearDisplay() {
        document.getElementById('current-year').textContent = this.currentYear;
        document.getElementById('target-year').textContent = this.targetYear;
    }
    
    setupEventListeners() {
        // Search button
        document.getElementById('search-btn').addEventListener('click', () => {
            this.applyFiltersAndRender();
        });
        
        // Filter changes
        document.querySelectorAll('select').forEach(select => {
            select.addEventListener('change', () => {
                this.applyFiltersAndRender();
            });
        });
        
        // Table column sorting
        document.querySelectorAll('.sortable').forEach(th => {
            th.addEventListener('click', () => {
                const sortField = th.dataset.sort;
                this.sortTable(sortField, th);
            });
        });
    }
    
    async loadRecordings() {
        const loadingEl = document.getElementById('loading');
        const noResultsEl = document.getElementById('no-results');
        const countEl = document.getElementById('results-count');
        
        // Show loading state
        loadingEl.style.display = 'block';
        noResultsEl.style.display = 'none';
        countEl.textContent = '';
        
        try {
            // Load real data from JSON files generated by R export script
            await this.loadDataFromAPI();
            
            // Apply filters and render
            this.applyFiltersAndRender();
            
        } catch (error) {
            console.error('Error loading recordings:', error);
            this.showError('Failed to load recordings. Please try again.');
        } finally {
            loadingEl.style.display = 'none';
        }
    }
    
    applyFiltersAndRender() {
        this.applyFilters();
        this.renderTable();
    }
    
    async loadDataFromAPI() {
        try {
            // Load actual data from JSON files generated by R script
            const response = await fetch('data/recordings.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            this.recordings = await response.json();
            
            // Clean and standardize the data
            this.recordings = this.recordings.map(record => {
                const parsed = this.parseArtistTitle(record.title, record.artist);
                return {
                    ...record,
                    // Parse artist and title properly
                    artist: parsed.artist,
                    title: parsed.title,
                    // Normalize genre names for filtering
                    genre: this.normalizeGenre(record.genre)
                };
            });
            
            console.log('Loaded', this.recordings.length, 'recordings from database');
            
            // Populate filter dropdowns with actual data
            this.populateFilters();
            
        } catch (error) {
            console.error('Error loading data:', error);
            
            // Fallback to sample data if JSON loading fails
            console.log('Falling back to sample data');
            this.recordings = [
                {
                    title: "Data Loading Error - Using Sample Data",
                    artist: "System Message",
                    year: 1925,
                    country: "US",
                    genre: "jazz",
                    label: "Sample Records",
                    popularity_score: 0.5
                }
            ];
        }
    }
    
    normalizeGenre(genre) {
        if (!genre || genre === 'Unknown') return '';
        
        // Map complex genre strings to simpler categories for filtering
        const genreMap = {
            'Folk, World, & Country': 'folk',
            'Pop, Folk, World, & Country': 'folk',
            'Jazz, Pop': 'jazz',
            'Jazz, Blues': 'jazz',
            'Jazz, Pop, Stage & Screen': 'jazz'
        };
        
        // Check if exact match in map
        if (genreMap[genre]) {
            return genreMap[genre];
        }
        
        // Check if contains key genre terms
        const lowerGenre = genre.toLowerCase();
        if (lowerGenre.includes('folk')) return 'folk';
        if (lowerGenre.includes('jazz')) return 'jazz';
        if (lowerGenre.includes('pop')) return 'popular';
        if (lowerGenre.includes('blues')) return 'blues';
        if (lowerGenre.includes('classical')) return 'classical';
        if (lowerGenre.includes('ragtime')) return 'ragtime';
        if (lowerGenre.includes('dance')) return 'dance';
        
        return lowerGenre;
    }
    
    parseArtistTitle(originalTitle, originalArtist) {
        // If we already have a real artist (not "Unknown Artist"), use it
        if (originalArtist && originalArtist !== "Unknown Artist" && !originalArtist.includes("Unknown")) {
            return {
                artist: this.cleanArtistName(originalArtist),
                title: originalTitle
            };
        }
        
        // Parse title to extract artist and song information
        let title = originalTitle;
        let artist = "Unknown Artist";
        
        // Common patterns in 1925 recordings:
        // "Artist Name - Song Title / B-Side"
        // "Artist Name* - Song Title / B-Side" 
        // "Artist Name And His Orchestra - Song Title"
        
        // Pattern 1: "Artist - Title / B-side" or "Artist - Title"
        const dashPattern = /^([^-]+?)\s*[-–]\s*(.+)$/;
        const dashMatch = title.match(dashPattern);
        
        if (dashMatch) {
            const potentialArtist = dashMatch[1].trim();
            const restOfTitle = dashMatch[2].trim();
            
            // Check if this looks like an artist name (not just a song title)
            if (this.looksLikeArtistName(potentialArtist)) {
                artist = this.cleanArtistName(potentialArtist);
                title = this.cleanSongTitle(restOfTitle);
            }
        }
        
        // Pattern 2: Look for "And His Orchestra", "And Her Band", etc.
        const orchestraPattern = /^(.+?)\s+(?:And His|And Her|&|With|featuring)\s+(?:Orchestra|Band|Syncopators|Group|Quartet|Trio).*/i;
        const orchestraMatch = originalTitle.match(orchestraPattern);
        
        if (orchestraMatch && artist === "Unknown Artist") {
            const potentialArtist = orchestraMatch[1].trim();
            if (this.looksLikeArtistName(potentialArtist)) {
                artist = this.cleanArtistName(potentialArtist);
                // For orchestra records, keep more of the original title
                title = originalTitle;
            }
        }
        
        return { artist, title };
    }
    
    looksLikeArtistName(text) {
        // Skip if it's too long (probably not just an artist name)
        if (text.length > 50) return false;
        
        // Skip if it contains song-like words
        const songWords = ['love', 'baby', 'blues', 'song', 'dance', 'waltz', 'march'];
        const lowerText = text.toLowerCase();
        if (songWords.some(word => lowerText.includes(word))) {
            return false;
        }
        
        // Good signs it's an artist name
        const artistIndicators = ['orchestra', 'band', 'quartet', 'trio', 'group', 'syncopators'];
        if (artistIndicators.some(word => lowerText.includes(word))) {
            return true;
        }
        
        // Looks like a person's name (2-4 words, reasonable length)
        const words = text.trim().split(/\s+/);
        return words.length >= 1 && words.length <= 4;
    }
    
    cleanArtistName(artist) {
        return artist
            .replace(/\*+/g, '') // Remove asterisks
            .replace(/\s*\(\d+\)\s*/g, '') // Remove numbers in parentheses like "(2)"
            .replace(/\s*\[\d+\]\s*/g, '') // Remove numbers in brackets
            .replace(/\s+/g, ' ') // Normalize spaces
            .trim();
    }
    
    cleanSongTitle(title) {
        // Split on " / " to get the A-side (first song)
        const aSide = title.split(' / ')[0];
        return aSide.trim();
    }
    
    applyFilters() {
        const countryFilter = document.getElementById('country-filter').value;
        const genreFilter = document.getElementById('genre-filter').value;
        const sortFilter = document.getElementById('sort-filter').value;
        
        console.log('Applying filters:', {countryFilter, genreFilter, sortFilter});
        console.log('Total recordings before filter:', this.recordings.length);
        
        // Filter recordings
        this.filteredRecordings = this.recordings.filter(recording => {
            // Country matching - handle various formats
            const matchesCountry = !countryFilter || 
                recording.country === countryFilter ||
                (countryFilter === 'United States' && (recording.country === 'US' || recording.country === 'USA')) ||
                (countryFilter === 'United Kingdom' && (recording.country === 'UK' || recording.country === 'GB'));
            
            // Genre matching - handle complex genre strings and normalization
            const recordingGenre = this.normalizeGenre(recording.genre);
            const matchesGenre = !genreFilter || 
                recordingGenre === genreFilter ||
                recording.genre.toLowerCase().includes(genreFilter.toLowerCase());
            
            const matches = matchesCountry && matchesGenre;
            
            return matches;
        });
        
        console.log('Filtered recordings count:', this.filteredRecordings.length);
        console.log('Sample filtered records:', this.filteredRecordings.slice(0, 3));
    }
    
    sortTable(field, thElement) {
        // Toggle sort direction
        const currentDirection = thElement.dataset.sortDir || 'asc';
        const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';
        
        // Update UI indicators
        document.querySelectorAll('.sort-arrow').forEach(arrow => arrow.textContent = '↕️');
        thElement.querySelector('.sort-arrow').textContent = newDirection === 'asc' ? '↑' : '↓';
        thElement.dataset.sortDir = newDirection;
        
        // Sort data
        this.filteredRecordings.sort((a, b) => {
            let aVal = a[field];
            let bVal = b[field];
            
            // Handle different data types - all text sorting now
            aVal = String(aVal || '').toLowerCase();
            bVal = String(bVal || '').toLowerCase();
            
            const comparison = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
            return newDirection === 'asc' ? comparison : -comparison;
        });
        
        // Re-render table
        this.renderTable();
    }
    
    renderTable() {
        const tbodyEl = document.getElementById('recordings-tbody');
        const noResultsEl = document.getElementById('no-results');
        const countEl = document.getElementById('results-count');
        
        if (this.filteredRecordings.length === 0) {
            noResultsEl.style.display = 'block';
            tbodyEl.innerHTML = '';
            countEl.textContent = '';
            return;
        }
        
        noResultsEl.style.display = 'none';
        countEl.textContent = `Found ${this.filteredRecordings.length} recording${this.filteredRecordings.length !== 1 ? 's' : ''}`;
        
        tbodyEl.innerHTML = this.filteredRecordings.map(recording => `
            <tr>
                <td>${this.escapeHtml(recording.country)}</td>
                <td>${this.escapeHtml(this.normalizeGenreForDisplay(recording.genre))}</td>
                <td>${this.escapeHtml(recording.artist)}</td>
                <td>${this.escapeHtml(recording.title)}</td>
                <td class="links-cell">${this.renderMusicLinks(recording)}</td>
            </tr>
        `).join('');
    }
    
    normalizeGenreForDisplay(genre) {
        if (!genre || genre === 'Unknown') return 'Unknown';
        // Simplify complex genre strings for display
        if (genre.includes('Folk')) return 'Folk';
        if (genre.includes('Jazz')) return 'Jazz';  
        if (genre.includes('Pop')) return 'Pop';
        if (genre.includes('Blues')) return 'Blues';
        if (genre.includes('Classical')) return 'Classical';
        return genre;
    }
    
    async loadStats() {
        try {
            // Load real stats from JSON file generated by R export script
            const response = await fetch('data/stats.json');
            if (response.ok) {
                const stats = await response.json();
                
                document.getElementById('total-recordings').textContent = stats.totalRecordings.toLocaleString();
                document.getElementById('total-artists').textContent = stats.totalArtists.toLocaleString();
                document.getElementById('total-countries').textContent = stats.totalCountries;
                document.getElementById('total-genres').textContent = stats.totalGenres;
                
                console.log('Loaded real statistics:', stats);
            } else {
                throw new Error('Stats file not found');
            }
            
        } catch (error) {
            console.error('Error loading stats:', error);
            
            // Fallback stats
            document.getElementById('total-recordings').textContent = '---';
            document.getElementById('total-artists').textContent = '---';
            document.getElementById('total-countries').textContent = '---';
            document.getElementById('total-genres').textContent = '---';
        }
    }
    
    showError(message) {
        const tbodyEl = document.getElementById('recordings-tbody');
        const noResultsEl = document.getElementById('no-results');
        
        if (tbodyEl) {
            tbodyEl.innerHTML = `<tr><td colspan="5" style="text-align: center; color: #d32f2f; padding: 2rem;">${message}</td></tr>`;
        }
        
        if (noResultsEl) {
            noResultsEl.style.display = 'block';
            noResultsEl.innerHTML = `<p style="color: #d32f2f;">${message}</p>`;
        }
    }
    
    renderMusicLinks(recording) {
        // For table format, just show YouTube link
        const searchQuery = recording.artist !== 'Unknown Artist' 
            ? `${recording.artist} ${recording.title}`.replace(/[^A-Za-z0-9 ]/g, '') 
            : recording.title.replace(/[^A-Za-z0-9 ]/g, '');
        const youtubeUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(searchQuery + ' ' + recording.year)}`;
        
        return `<a href="${youtubeUrl}" target="_blank" title="Search on YouTube" class="youtube-link">🎬</a>`;
    }
    
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new CenturyOldTunesApp();
});

// Export data to CSV function (for future use)
function exportToCSV() {
    // This would export the current filtered results to CSV
    console.log('Export functionality would be implemented here');
}

// Function to integrate with R backend (for future implementation)
async function fetchFromRAPI(endpoint, params = {}) {
    // This would make requests to R Plumber API or similar
    // For now, return sample data
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve({ data: [], message: 'R API integration coming soon' });
        }, 500);
    });
}